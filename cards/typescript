omit
type helper to remove key a and b from object type T
Omit<T, 'a' | 'b'>

exclude
Exclude from T those types that are assignable to U
type Exclude<U, T> =

partial
Make all properties in T optional
type Partial<T> = {[P in keyof T]?: T[P]}

required
Make all properties in T required
type Required<T> = {[P in keyof T]-?: T[P]}

readonlyhelper
Make all properties in T readonly
type Readonly<T> = {readonly [P in keyof T]: T[P]}

pick
From T, pick a set of properties whose keys are in the union K
type Pick<T, K extends keyof T> = {[P in K]: T[P]}

record
Construct a type with a set of properties K of type T
type Record<K extends keyof any, T> = {[P in K]: T}

exclude
Exclude from T those types that are assignable to U
type Exclude<T, U> = T extends U ? never : T

extract
Extract from T those types that are assignable to U
type Extract<T, U> = T extends U ? T : never

omit
Construct a type with the properties of T except for those in type K.
type Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>

nonnullable
Exclude null and undefined from T
type NonNullable<T> = T & {}

parameters
Obtain the parameters of a function type in a tuple
type Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never

constructorparameters
Obtain the parameters of a constructor function type in a tuple
type ConstructorParameters<T extends abstract new (...args: any) => any> = T extends abstract new (...args: infer P) => any ? P : never

returntype
Obtain the return type of a function type
type ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any

instancetype
Obtain the return type of a constructor function type
type InstanceType<T extends abstract new (...args: any) => any> = T extends abstract new (...args: any) => infer R ? R : any